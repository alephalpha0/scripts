#!/data/data/com.termux/files/usr/bin/bash
##################################################
## alephalpha0  |  Download files passed to me. ##
## created:2020-10-20   |  modified:2020-10-31  ##
##----------------------------------------------##
##        https://github.com/alephalpha0        ##
##            http://rootofpi.me                ##
####################           ###################
#############                        #############
## Many thanks to those who have shared and     ##
## discussed their dotfiles/source code/scripts ## 
## on blogs, stackoverflow, dev.to, gitlab /    ##
## github, and any open forum for ideas on the  ##
##  world wide web. I am continually learning   ##
## and discovering new things because of you.   ##
##################################################
## There is no LICENSE attached to this file.   ##
##     I require no attribute for its use.      ##
## Do what thou will. That's the whole of law.  ##
##----------------------------------------------##
##!!!!!!!!!!NO WARRANTY PROVIDED FOR!!!!!!!!!!!!##
##!!!!!!!!!!!ANY POSSIBLE USE EITHER!!!!!!!!!!!!##
##################################################
# Script takes urls passed to it and downloads the 
# playlist, video, file or page to ~/downloads/*. 
#
# I'm using it as the script termux uses when a url
# is passed to it from amother app.
#
# Trying to preempt myself and guess my general 
# reasons for sharing to termux. Main use in my 
# eyes is downloading raw files from github,
# and downloading videos from youtube.. 
###########################################################

###TODO
# Pretty up the script.
# Add more cases to url options.
# Make it command-line ready?

### SCRIPT VARIABLES
#sets URL to the url shared/passed to termux
readonly URL="${1}"
# the base download dir
readonly DIR=~/downloads

##################################################
# Gracefully exit on error like a lady.
likeALady() {
	echo "That dir does not appear in our time line."
	return 1
}


##################################################
# Two-step tussle to figure out if the dir exists. 
# if not mkdir & cd into dir, if so just cd into it.
dirExists() {
    #the subdirectory we are checking.
	local silkMouth="${1}"

	if [ -d "${DIR}"/"${silkMouth}" ]
	then
	    cd "${DIR}"/"${silkMouth}" || likeALady
	else
	    mkdir "${DIR}"/"${silkMouth}"
	    cd "${DIR}"/"${silkMouth}" || likeALady
	fi
}


main(){

##################################################
# Main logic block. First will check that we 
# didn't accidentally get passed an empty string. 
# If so, we exit, hopefully gracefully like a lady.
if [ -z "${URL}" ]; then
    echo "You've passed an empty string to the script. "
    return 1
else
##################################################
# Logic train using case on URL parts to see how 
# to handle downloading.
    case ${URL} in
    
    *playlist*) #check if url is a youtube playlist
        dirExists music #check ${DIR}/music exists & cd
        youtube-dlc --extract-audio --audio-format mp3 \
        --audio-quality 0 \
        -o "%(playlist_title)s/%(playlist_index)02d-%(title)s.%(ext)s" \
        "${URL}"
        return 0
    ;;
         
    *youtube*|*youtu.be*) #check if url is youtube
        dirExists videos #check ${DIR}/videos exists &cd 
        youtube-dlc -o "%(title)s.%(ext)s" "${URL}"
        return 0
    ;;
            
    *github*) #check if url is github.
        cd "${DIR}" || likeALady
        wget --show-progress "${URL}"
        return 0
    ;;
      
    *.tar.bz2|*.txt|*.md5|*.sha1|*.sha256) 
    #getting a single file from the web
        cd "${DIR}" || likeALady
        wget --show-progress "${URL}"
        return 0
    ;;
      
    *pornhub*) # yeah so what?
        dirExists porn # does ${DIR}/porn exist?
        youtube-dlc "${URL}"
        return 0
    ;;
      
    *)
        echo "I'm not sure what you want me to do here.."
        return 1
    ;;
    esac
fi
}
main
