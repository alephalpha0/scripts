#!/bin/bash
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
#   termux-url-opener ||  Eats up URLs and spits out files. #
#    created:2020-11-04      ||     modified:2020-11-04     #
# product of alephalpha0's mind ////  A ROOTOFPI PRODUCTION #
#  http://github.com/alephalpha0       http://rootofpi.me   #
#########################         ###########################
##################                       ####################
# Many thanks to those who have shared and discussed their  #
# dotfiles/source code/scripts on blogs, stackoverflow,     #
# dev.to, gitlab / github, and any open forum for ideas on  #
# the world wide web. I am continually learning and finding #
# new things because of you.                                #
#############################################################
#############################################################
# termux-url-opener | tui to download URLs passed to it into file.
# Copyright (C) 2020 alephalpha0

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


### SCRIPT VARIABLES
#sets URL to the url shared/passed to termux
readonly URL="$1"
#to be used in menu selection function.

# --------------------------------------------------------- #
# likeALady ()                                              #
# Gracefully gives a comment and exits like a lady.         #
# Parameters: N/A                                           #
# Returns: $E_NOTFOUND on completion.                       #
# --------------------------------------------------------- #
likeALady() {
  local E_NOTFOUND=1
	echo "That object does not appear in our time line."
	exit ${E_NOTFOUND}
}

# --------------------------------------------------------- #
# dirExists ()                                              #
# Check if directory exists and cd to it. If not, mkdir     #
# and cd.                                                   #
# Parameters: $1 directory to check                         #
# Returns: 0 for completion.                                #
# --------------------------------------------------------- #
dirExists() {
    #the subdirectory we are checking.
	local silkMouth=~/downloads/"${1}"

	if [ -d "${silkMouth}" ]
	then
	    cd "${silkMouth}" || likeALady
	    return 0
	else
	    mkdir "${silkMouth}"
	    cd "${silkMouth}" || likeALady
	    return 0
	fi
}
# --------------------------------------------------------- #
# printMenu ()                                              #
# Print out a menu of download options.                     #
# Parameters: N/A                                           #
# Returns: $selection number selected                       #
# --------------------------------------------------------- #
printMenu() {
    # background color using ANSI escape    
    bgBlack=$(tput setab 0) # black
    bgRed=$(tput setab 1) # red
    bgGreen=$(tput setab 2) # green
    bgYellow=$(tput setab 3) # yellow
    bgBlue=$(tput setab 4) # blue
    bgMagenta=$(tput setab 5) # magenta
    bgCyan=$(tput setab 6) # cyan
    bgWhite=$(tput setab 7) # white
    
    # foreground color using ANSI escape
    fgBlack=$(tput setaf 0) # black
    fgRed=$(tput setaf 1) # red
    fgGreen=$(tput setaf 2) # green
    fgYellow=$(tput setaf 3) # yellow
    fgBlue=$(tput setaf 4) # blue
    fgMagenta=$(tput setaf 5) # magenta
    fgCyan=$(tput setaf 6) # cyan
    fgWhite=$(tput setaf 7) # white
    
    # text editing options
    txBold=$(tput bold)   # bold
    txHalf=$(tput dim)    # half-bright
    txUnderline=$(tput smul)   # underline
    txEndUnder=$(tput rmul)   # exit underline
    txReverse=$(tput rev)    # reverse
    txStandout=$(tput smso)   # standout
    txEndStand=$(tput rmso)   # exit standout
    txReset=$(tput sgr0)   # reset attributes
    
	local selection=4
	local lineplus="${bgBlue}${fgBlack}+++++++++++++++++++++++++++++++++++++++++++++++${txReset}"

	echo "${txBold}${bgBlue}${fgBlack}Welcome to alephalpha0's Download Menu ${txReset} ${txUnderline}v.0.2.0${txReset}"
	echo "${txHalf}+ Choose your download method option below:${txReset}"
	echo "${txHalf}+ Script defaults to 4.)${txReset}"
	echo "${lineplus}"
	echo "+ 1.) Youtube-DLC (Music)(MP3)(Conversion)"
	echo "+ 2.) Youtube-DLC (Video)(MP4)(Conversion)"
	echo "+ 3.) Youtube-DLC (Video)(Best Audio/Video)(No conversion)"
	echo "+ 4.) wget (Single File)"
	echo "+ 5.) wget (Single Page)(Mirror)"
	echo "${lineplus}"
	read -r -p "Number?:" selection
	while [[ $selection -gt 5 ]]
	do
	  read -r -p "Please input correct option:" selection
	done 
	return "$selection"
}

main() {
	printMenu
	userSelect=$?
	case "$userSelect" in
	1)
	  dirExists music
	  youtube-dlc --restrict-filenames -x \
	  --audio-format mp3 --audio-quality 0\
	   -f bestaudio -c "${URL}" -o "%(title)s.%(ext)s"
	  exit 0
	;;

	2)
	  dirExists video
	  youtube-dlc -c -f mp4 "${URL}" -o\
	   "%(title)s.%(ext)s"
	  exit 0
	;;

	3)
	  dirExists video
	  youtube-dlc -c "${URL}" -o "%(title)s.%(ext)s"
	  exit 0
	;;

	4)
	  dirExists files
	  wget -c --show-progress "$URL"
	  exit 0
	;;

	5)
	  dirExists webpage
	  wget --adjust-extension --span-hosts\
	   --convert-links --backup-converted \
	   --page-requisites "$URL"
	   exit 0
	;;

	*)
	  echo "????????????????????"
	  exit 1
	;;
    esac
}
	
main
